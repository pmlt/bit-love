; Aliases for bit-love
.alias        num_pages       7
.alias        STATE_INIT      0
.alias        STATE_FADEIN    1
.alias        STATE_INPUT     2
.alias        STATE_FADEOUT   3
.alias        STATE_MELTDOWN  4
.alias        STATE_ACCEPT    5
.alias        DIRECTION_LEFT  1
.alias        DIRECTION_RIGHT 2

.data zp
.org $0000
.space current'nt'ptr 2 ;Pointer MUST be in zero-page;

.data provars
.org $0100
.space scroll 1
.space btn'left 1
.space btn'right 1
.space btn'a 1
.space btn'b 1
.space page 1
.space lock'input 1
.space meltdown 1
.space fade'level 1
.space fade'timer 1
.space state 1
.space direction 1

.text
.org $8000

.advance $A916 ; Load address for music
.incbin "raw-bit-love.nsf"

.advance $C000 ; Start of program code
reset:  sei
        cld
        
        lda #STATE_INIT
        sta state
        
        ; Wait two VBLANKs.
*       lda $2002
        bpl -
*       lda $2002
        bpl -

        ; Clear out RAM.
        lda #$00
        ldx #$00
*       sta $000,x
        sta $100,x
        sta $200,x
        sta $300,x
        sta $400,x
        sta $500,x
        sta $600,x
        sta $700,x
        inx
        bne -

        ; Reset the stack pointer.
        ldx #$FF
        txs

        ; Disable all graphics.
        jsr disable'graphics

        jsr init'graphics
        jsr init'input
        jsr init'sound

        jsr enable'graphics
        
        cli
        
        lda #STATE_FADEIN
        sta state

        ; Transfer control to the VBLANK routines.
loop:   jmp loop

init'graphics:
        jsr init'sprites
        jsr load'palette
        jsr init'name'tables
        jsr init'scrolling
        rts

init'input:
        lda #$00
        sta btn'a
        sta btn'b
        sta btn'left
        sta btn'right
        sta lock'input
        sta meltdown
        rts

init'sound:
        lda #$0F
        sta $4015
        
        ldy #0
@loop:  lda @regs,y
        sta $4000,y
        iny
        cpy #$18
        bne @loop
        
        rts
@regs:
        .byte $30,$08,$00,$00
        .byte $30,$08,$00,$00
        .byte $80,$00,$00,$00
        .byte $30,$00,$00,$00
        .byte $00,$00,$00,$00
        .byte $00,$0F,$00,$40

init'sprites:
        rts

init'scrolling:
        lda #0
        sta scroll
        rts

; Load palette into $3F00
load'palette:
        lda #$00
        sta fade'level
        sta fade'timer
        
        lda #$3F
        ldx #$00
        sta $2006
        stx $2006
*       lda palette,x
        sta $2007
        inx
        cpx #$20
        bne -
        rts

init'name'tables:
; Jam some text into the first name table (at $2400, thanks to mirroring)
        lda #1
        sta page
        lda #<bg1
        sta current'nt'ptr
        lda #>bg1
        sta current'nt'ptr+1
        jsr send'prose'page
        rts

react'to'input:
        ; Check if input is locked
        lda lock'input
        bne end'input
        lda #$01        ; strobe joypad
        sta $4016
        lda #$00
        sta $4016

        lda $4016        ; Check if A is pressed
        and #1
        beq +
        ldx btn'a
        bne ++
        sta btn'a
        jsr press'a
        jmp ++
*       sta btn'a
*       lda $4016        ; Check if B is pressed
        and #1
        beq +
        ldx btn'b
        bne ++
        sta btn'b
        jsr press'b
        jmp ++
*       sta btn'b
*       lda $4016        ; Select does nothing
        lda $4016        ; Start does nothing
        lda $4016        ; Up
        lda $4016        ; Down
        lda $4016        ; Left
        and #1
        beq +
        ldx btn'left
        bne ++
        sta btn'left
        jsr press'left
        jmp ++
*       sta btn'left
*       lda $4016        ; Right
        and #1
        beq +
        ldx btn'right
        bne end'input
        sta btn'right
        jsr press'right
        jmp end'input
*       sta btn'right
end'input:
        rts              

vblank: 
        lda state
        cmp #STATE_FADEIN
        bne +
        jsr fade'in
        jmp end'vblank
*       cmp #STATE_INPUT
        bne +
        jsr react'to'input
        jmp end'vblank
*       cmp #STATE_FADEOUT
        bne +
        jsr fade'out
        jmp end'vblank
*       cmp #STATE_MELTDOWN
        bne +
        jsr do'meltdown
        jmp end'vblank
*       cmp #STATE_ACCEPT
        bne end'vblank
        jsr $AA58 ; Play the song!
        jmp end'vblank
end'vblank:
        jsr send'scroll
irq:    rti

fade'in:
        lda fade'level
        cmp #5
        beq stop'fade'in
        ldx fade'timer
        inx
        stx fade'timer
        cpx #3
        bne end'fade'in
        jsr send'fade'level
        inc fade'level
        lda #$00
        sta fade'timer
        jmp end'fade'in
stop'fade'in:
        lda #STATE_INPUT
        sta state
        lda #0
        sta fade'timer
end'fade'in:
        rts

fade'out:
        lda fade'level
        cmp #0
        beq stop'fade'out
        ldx fade'timer
        inx
        stx fade'timer
        cpx #5
        bne end'fade'out
        jsr send'fade'level
        dec fade'level
        lda #$00
        sta fade'timer
        jmp end'fade'out
stop'fade'out:
        lda direction
        cmp #DIRECTION_RIGHT
        beq +
        jsr previous'page
        jmp ++
*       jsr next'page
*       lda #STATE_FADEIN
        sta state
        lda #0
        sta fade'timer
end'fade'out:
        rts

do'meltdown:
        jsr send'prose'page
        jsr play'noise
        rts

.include "lib.oph"

.include "bg.oph"

.advance $FFFA
.word vblank, reset, irq
