; Program code for NES 101 Tutorial
; Code by Michael Martin, 2001-2

; Assign the sprite page to page 2.
.alias        sprite        $200

; Allocate memory in the zero page segment.  If we
; really wanted to, we could scatter these declarations
; through the code (P65 1.1 lets us do so) but not all
; assemblers allow this, and it doesn't help clarity
; any on this program.  So the heck with it.

; As a side note, P65 doesn't really grant any special
; status to any of the segments you use, and only has
; "text" and "data" built in.  This means that "zp"
; could be named whatever we wanted, and it also means
; that we have to tell it where to start from (it's the
; zero page, so we start it from zero, naturally).

.data zp
.org $0000
.space column 1
.space line 1
.space sprite'ptr 2
.space prose'ptr 2

; If we had a normal data segment, it would have an .org $0300, so
; that it doesn't stomp on our sprite data.

; Actual program code.  We only have one PRG-ROM chip here, so the
; origin is $C000.
.text
.org $C000

reset:  sei
        cld
        ; Wait two VBLANKs.
*       lda $2002
        bpl -
*       lda $2002
        bpl -

        ; Clear out RAM.
        lda #$00
        ldx #$00
*       sta $000,x
        sta $100,x
        sta $200,x
        sta $300,x
        sta $400,x
        sta $500,x
        sta $600,x
        sta $700,x
        inx
        bne -

        ; Reset the stack pointer.
        ldx #$FF
        txs

        ; Disable all graphics.
        lda #$00
        sta $2000
        sta $2001

        jsr init'graphics
        jsr init'input
        jsr init'sound

        ; Set basic PPU registers.  Load background from $0000,
        ; sprites from $1000, and the name table from $2000.
        lda #%10001000
        sta $2000
        lda #%00011110
        sta $2001

        cli

        ; Transfer control to the VBLANK routines.
loop:   jmp loop

init'graphics:
        jsr init'sprites
        jsr load'palette
        jsr load'name'tables
        rts

init'input:
        rts

init'sound:
        ; initialize sound hardware
        lda #$01
        sta $4015
        lda #$00
        sta $4001
        lda #$40
        sta $4017
        rts

init'sprites:
        lda #$00
        ldx #$00
        sta sprite'ptr
        sta prose'ptr
        sta column
        ; Clear page #2, which we'll use to hold sprite data
*       sta sprite, x
        inx
        bne -
        lda #$01
        sta line

        ; Store prose offset in X,sprite offset in Y
        ldx column
        ldy column
writechar:
        stx column
        lda #$00
        sta sprite,y        ; Y coordinate
        iny
        lda prose,x
        sta sprite,y        ; Pattern number
        iny
        lda #$00            ; multiply column by 8
        cpx #$00
        beq ++
        clc
*       adc #$08
        dex
        bne -
*       ldx column          ; restore value of x register
        sta sprite,y        ; color & background priority
        iny
        sta sprite,y        ; X coordinate
        iny
        inx
        cpx #$20            ; stop after 32 characters
        bne writechar
        rts

; Load palette into $3F00
load'palette:
        lda #$3F
        ldx #$00
        sta $2006
        stx $2006
*       lda palette,x
        sta $2007
        inx
        cpx #$20
        bne -
        rts

load'name'tables:
; Jam some text into the first name table (at $2400, thanks to mirroring)
        ldy #$00
        ldx #$04
        lda #<bg
        sta $10
        lda #>bg
        sta $11
        lda #$24
        sta $2006
        lda #$00
        sta $2006
*       lda ($10),y
        sta $2007
        iny
        bne -
        inc $11
        dex
        bne -

; Clear out the Name Table at $2800 (where we already are.  Yay.)
        ldy #$00
        ldx #$04
        lda #$00
*       sta $2007
        iny
        bne -
        dex
        bne -
        rts

update'sprite:
        lda #>sprite
        sta $4014                ; Jam page $200-$2FF into SPR-RAM
        rts

react'to'input:
        lda #$01        ; strobe joypad
        sta $4016
        lda #$00
        sta $4016

        lda $4016        ; Is the A button down?
        lda $4016        ; B does nothing
        lda $4016        ; Select does nothing
        lda $4016        ; Start does nothing
        lda $4016        ; Up
        lda $4016        ; Down
        rts              ; Ignore left and right, we don't use 'em

vblank: 
        jsr update'sprite
        jsr react'to'input
irq:    rti

; palette data
palette:
.byte $0E,$00,$0E,$19,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$01,$21
.byte $0E,$00,$0E,$19,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$01,$21

; Background data
bg:
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
.byte "                                "
; Attribute table
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Text
prose:
.byte "Bacon ipsum dolor sit amet      "
.byte "bresaola ball tip tri-tip       "
.byte "capicola ham tongue salami.     "

.advance $FFFA
.word vblank, reset, irq
