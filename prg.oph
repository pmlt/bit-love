; Program code for NES 101 Tutorial
; Code by Michael Martin, 2001-2

; Assign the sprite page to page 2.
.alias        sprite        $200
.alias        num_pages     7

; Allocate memory in the zero page segment.  If we
; really wanted to, we could scatter these declarations
; through the code (P65 1.1 lets us do so) but not all
; assemblers allow this, and it doesn't help clarity
; any on this program.  So the heck with it.

; As a side note, P65 doesn't really grant any special
; status to any of the segments you use, and only has
; "text" and "data" built in.  This means that "zp"
; could be named whatever we wanted, and it also means
; that we have to tell it where to start from (it's the
; zero page, so we start it from zero, naturally).

.data zp
.org $0000

.space current'nt'ptr 2
.space scroll 1
.space btn'left 1
.space btn'right 1
.space btn'a 1
.space btn'b 1
.space page 1
.space lock'input 1
.space meltdown 1

; If we had a normal data segment, it would have an .org $0300, so
; that it doesn't stomp on our sprite data.

; Actual program code.  We only have one PRG-ROM chip here, so the
; origin is $C000.
.text
.org $C000

reset:  sei
        cld
        ; Wait two VBLANKs.
*       lda $2002
        bpl -
*       lda $2002
        bpl -

        ; Clear out RAM.
        lda #$00
        ldx #$00
*       sta $000,x
        sta $100,x
        sta $200,x
        sta $300,x
        sta $400,x
        sta $500,x
        sta $600,x
        sta $700,x
        inx
        bne -

        ; Reset the stack pointer.
        ldx #$FF
        txs

        ; Disable all graphics.
        jsr disable'graphics

        jsr init'graphics
        jsr init'input
        jsr init'sound

        jsr enable'graphics

        cli

        ; Transfer control to the VBLANK routines.
loop:   jmp loop

init'graphics:
        jsr init'sprites
        jsr load'palette
        jsr init'name'tables
        jsr init'scrolling
        rts

init'input:
        lda #$00
        sta btn'a
        sta btn'b
        sta btn'left
        sta btn'right
        sta lock'input
        sta meltdown
        rts

init'sound:
        lda #$0F
        sta $4015
        
        ldy #0
@loop:  lda @regs,y
        sta $4000,y
        iny
        cpy #$18
        bne @loop
        
        rts
@regs:
        .byte $30,$08,$00,$00
        .byte $30,$08,$00,$00
        .byte $80,$00,$00,$00
        .byte $30,$00,$00,$00
        .byte $00,$00,$00,$00
        .byte $00,$0F,$00,$40

init'sprites:
        rts

init'scrolling:
        lda #0
        sta scroll
        rts

; Load palette into $3F00
load'palette:
        lda #$3F
        ldx #$00
        sta $2006
        stx $2006
*       lda palette,x
        sta $2007
        inx
        cpx #$20
        bne -
        rts

init'name'tables:
; Jam some text into the first name table (at $2400, thanks to mirroring)
        lda #1
        sta page
        lda #<bg1
        sta current'nt'ptr
        lda #>bg1
        sta current'nt'ptr+1
        jsr send'prose'page
        rts

react'to'input:
        ; Check if input is locked
        lda lock'input
        bne end'input
        lda #$01        ; strobe joypad
        sta $4016
        lda #$00
        sta $4016

        lda $4016        ; Check if A is pressed
        and #1
        beq +
        ldx btn'a
        bne ++
        sta btn'a
        jsr press'a
        jmp ++
*       sta btn'a
*       lda $4016        ; Check if B is pressed
        and #1
        beq +
        ldx btn'b
        bne ++
        sta btn'b
        jsr press'b
        jmp ++
*       sta btn'b
*       lda $4016        ; Select does nothing
        lda $4016        ; Start does nothing
        lda $4016        ; Up
        lda $4016        ; Down
        lda $4016        ; Left
        and #1
        beq +
        ldx btn'left
        bne ++
        sta btn'left
        jsr press'left
        jmp ++
*       sta btn'left
*       lda $4016        ; Right
        and #1
        beq +
        ldx btn'right
        bne end'input
        sta btn'right
        jsr press'right
        jmp ++
*       sta btn'right
end'input:
        rts              

vblank: 
        lda meltdown
        bne do'meltdown
        jsr react'to'input
        jsr send'scroll
irq:    rti

do'meltdown:
        jsr send'prose'page
        jsr play'noise
        rti

.include "lib.oph"

.include "bg.oph"

.advance $FFFA
.word vblank, reset, irq
